// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"extensions": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Set to `all` to enable all extensions.",
				MarkdownDescription: "Set to `all` to enable all extensions.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"all",
					),
				},
			},
			"group": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"archived": schema.BoolAttribute{
						Computed:            true,
						Description:         "Groups on the free tier get archived after some inactivity.",
						MarkdownDescription: "Groups on the free tier get archived after some inactivity.",
					},
					"locations": schema.SetAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "An array of location keys the group is located.",
						MarkdownDescription: "An array of location keys the group is located.",
					},
					"name": schema.StringAttribute{
						Computed:            true,
						Description:         "The group name, unique across your organization.",
						MarkdownDescription: "The group name, unique across your organization.",
					},
					"primary": schema.StringAttribute{
						Computed:            true,
						Description:         "The primary location key.",
						MarkdownDescription: "The primary location key.",
					},
					"uuid": schema.StringAttribute{
						Computed:            true,
						Description:         "The group universal unique identifier (UUID).",
						MarkdownDescription: "The group universal unique identifier (UUID).",
					},
					"version": schema.StringAttribute{
						Computed:            true,
						Description:         "The current libSQL server version the databases in that group are running.",
						MarkdownDescription: "The current libSQL server version the databases in that group are running.",
					},
				},
				CustomType: GroupType{
					ObjectType: types.ObjectType{
						AttrTypes: GroupValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the group.",
				MarkdownDescription: "The name of the group.",
			},
			"primary": schema.StringAttribute{
				Required:            true,
				Description:         "The primary location key for the new group.",
				MarkdownDescription: "The primary location key for the new group.",
			},
			"locations": schema.SetAttribute{
				Required:            true,
				Description:         "All locations for the new group.",
				MarkdownDescription: "All locations for the new group.",
				ElementType:         types.StringType,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the new group.",
				MarkdownDescription: "The name of the new group.",
			},
		},
	}
}

type GroupModel struct {
	Extensions types.String `tfsdk:"extensions"`
	Group      GroupValue   `tfsdk:"group"`
	Id         types.String `tfsdk:"id"`
	Primary    types.String `tfsdk:"primary"`
	Locations  types.Set    `tfsdk:"locations"`
	Name       types.String `tfsdk:"name"`
}

var _ basetypes.ObjectTypable = GroupType{}

type GroupType struct {
	basetypes.ObjectType
}

func (t GroupType) Equal(o attr.Type) bool {
	other, ok := o.(GroupType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GroupType) String() string {
	return "GroupType"
}

func (t GroupType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	archivedAttribute, ok := attributes["archived"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`archived is missing from object`)

		return nil, diags
	}

	archivedVal, ok := archivedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`archived expected to be basetypes.BoolValue, was: %T`, archivedAttribute))
	}

	locationsAttribute, ok := attributes["locations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locations is missing from object`)

		return nil, diags
	}

	locationsVal, ok := locationsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locations expected to be basetypes.SetValue, was: %T`, locationsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	primaryAttribute, ok := attributes["primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`primary is missing from object`)

		return nil, diags
	}

	primaryVal, ok := primaryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`primary expected to be basetypes.StringValue, was: %T`, primaryAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GroupValue{
		Archived:  archivedVal,
		Locations: locationsVal,
		Name:      nameVal,
		Primary:   primaryVal,
		Uuid:      uuidVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewGroupValueNull() GroupValue {
	return GroupValue{
		state: attr.ValueStateNull,
	}
}

func NewGroupValueUnknown() GroupValue {
	return GroupValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGroupValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GroupValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GroupValue Attribute Value",
				"While creating a GroupValue value, a missing attribute value was detected. "+
					"A GroupValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GroupValue Attribute Type",
				"While creating a GroupValue value, an invalid attribute value was detected. "+
					"A GroupValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GroupValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GroupValue Attribute Value",
				"While creating a GroupValue value, an extra attribute value was detected. "+
					"A GroupValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GroupValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGroupValueUnknown(), diags
	}

	archivedAttribute, ok := attributes["archived"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`archived is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	archivedVal, ok := archivedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`archived expected to be basetypes.BoolValue, was: %T`, archivedAttribute))
	}

	locationsAttribute, ok := attributes["locations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locations is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	locationsVal, ok := locationsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locations expected to be basetypes.SetValue, was: %T`, locationsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	primaryAttribute, ok := attributes["primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`primary is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	primaryVal, ok := primaryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`primary expected to be basetypes.StringValue, was: %T`, primaryAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewGroupValueUnknown(), diags
	}

	return GroupValue{
		Archived:  archivedVal,
		Locations: locationsVal,
		Name:      nameVal,
		Primary:   primaryVal,
		Uuid:      uuidVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewGroupValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GroupValue {
	object, diags := NewGroupValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGroupValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GroupType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGroupValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGroupValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGroupValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGroupValueMust(GroupValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GroupType) ValueType(ctx context.Context) attr.Value {
	return GroupValue{}
}

var _ basetypes.ObjectValuable = GroupValue{}

type GroupValue struct {
	Archived  basetypes.BoolValue   `tfsdk:"archived"`
	Locations basetypes.SetValue    `tfsdk:"locations"`
	Name      basetypes.StringValue `tfsdk:"name"`
	Primary   basetypes.StringValue `tfsdk:"primary"`
	Uuid      basetypes.StringValue `tfsdk:"uuid"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v GroupValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["archived"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["locations"] = basetypes.SetType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["primary"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Archived.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["archived"] = val

		val, err = v.Locations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["locations"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Primary.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["primary"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GroupValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GroupValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GroupValue) String() string {
	return "GroupValue"
}

func (v GroupValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	locationsVal, d := types.SetValue(types.StringType, v.Locations.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"archived": basetypes.BoolType{},
			"locations": basetypes.SetType{
				ElemType: types.StringType,
			},
			"name":    basetypes.StringType{},
			"primary": basetypes.StringType{},
			"uuid":    basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"archived": basetypes.BoolType{},
		"locations": basetypes.SetType{
			ElemType: types.StringType,
		},
		"name":    basetypes.StringType{},
		"primary": basetypes.StringType{},
		"uuid":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"archived":  v.Archived,
			"locations": locationsVal,
			"name":      v.Name,
			"primary":   v.Primary,
			"uuid":      v.Uuid,
			"version":   v.Version,
		})

	return objVal, diags
}

func (v GroupValue) Equal(o attr.Value) bool {
	other, ok := o.(GroupValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Archived.Equal(other.Archived) {
		return false
	}

	if !v.Locations.Equal(other.Locations) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Primary.Equal(other.Primary) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v GroupValue) Type(ctx context.Context) attr.Type {
	return GroupType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GroupValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"archived": basetypes.BoolType{},
		"locations": basetypes.SetType{
			ElemType: types.StringType,
		},
		"name":    basetypes.StringType{},
		"primary": basetypes.StringType{},
		"uuid":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}
