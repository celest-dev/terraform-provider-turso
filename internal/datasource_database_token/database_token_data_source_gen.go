// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_database_token

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DatabaseTokenDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"authorization": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Authorization level for the token (full-access or read-only).",
				MarkdownDescription: "Authorization level for the token (full-access or read-only).",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"full-access",
						"read-only",
					),
				},
			},
			"expiration": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Expiration time for the token (e.g., 2w1d30m).",
				MarkdownDescription: "Expiration time for the token (e.g., 2w1d30m).",
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the database.",
				MarkdownDescription: "The name of the database.",
			},
			"jwt": schema.StringAttribute{
				Computed:            true,
				Description:         "The generated authorization token (JWT).",
				MarkdownDescription: "The generated authorization token (JWT).",
			},
		},
	}
}

type DatabaseTokenModel struct {
	Authorization types.String `tfsdk:"authorization"`
	Expiration    types.String `tfsdk:"expiration"`
	Id            types.String `tfsdk:"id"`
	Jwt           types.String `tfsdk:"jwt"`
}
